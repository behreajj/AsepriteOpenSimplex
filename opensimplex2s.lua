---K.jpg's OpenSimplex 2, smooth variant ("SuperSimplex")
---https://github.com/KdotJPG/OpenSimplex2/
---
---* 2D is standard simplex, modified to support larger kernels.
---  Implemented using a lookup table.
---* 3D is "Re-oriented 8-point BCC noise" which constructs a
---  congruent BCC lattice in a much different way than usual.
---* 4D uses a naive pregenerated lookup table, and averages out
---  to the expected performance.
---
---Multiple versions of each function are provided. See the
---documentation above each, for more info.

Grad2 = {}
Grad2.__index = Grad2

setmetatable(Grad2, {
    __call = function (cls, ...)
        return cls.new(...)
    end})

function Grad2.new(dx, dy)
    local inst = setmetatable({}, Grad2)
    inst.dx = dx
    inst.dy = dy
    return inst
end

Grad3 = {}
Grad3.__index = Grad3

setmetatable(Grad3, {
    __call = function (cls, ...)
        return cls.new(...)
    end})

function Grad3.new(dx, dy, dz)
    local inst = setmetatable({}, Grad3)
    inst.dx = dx
    inst.dy = dy
    inst.dz = dz
    return inst
end

Grad4 = {}
Grad4.__index = Grad4

setmetatable(Grad4, {
    __call = function (cls, ...)
        return cls.new(...)
    end})

function Grad4.new(dx, dy, dz, dw)
    local inst = setmetatable({}, Grad4)
    inst.dx = dx
    inst.dy = dy
    inst.dz = dz
    inst.dw = dw
    return inst
end

LatticePoint2D = {}
LatticePoint2D.__index = LatticePoint2D

setmetatable(LatticePoint2D, {
    __call = function (cls, ...)
        return cls.new(...)
    end})

function LatticePoint2D.new(xsv, ysv)
    local inst = setmetatable({}, LatticePoint2D)
    inst.xsv = xsv
    inst.ysv = ysv
    local ssv = (xsv + ysv) * -0.211324865405187;
    inst.dx = -xsv - ssv
    inst.dy = -ysv - ssv
    return inst
end

LatticePoint3D = {}
LatticePoint3D.__index = LatticePoint3D

setmetatable(LatticePoint3D, {
    __call = function (cls, ...)
        return cls.new(...)
    end})

function LatticePoint3D.new(xrv, yrv, zrv, lattice)
    local inst = setmetatable({}, LatticePoint3D)
    inst.dxr = -xrv + lattice * 0.5
    inst.dyr = -yrv + lattice * 0.5
    inst.dzr = -zrv + lattice * 0.5

    inst.xrv = xrv + lattice * 1024
    inst.yrv = yrv + lattice * 1024
    inst.zrv = zrv + lattice * 1024

    inst.nextOnFailure = nil
    inst.nextOnSuccess = nil

    return inst
end

LatticePoint4D = {}
LatticePoint4D.__index = LatticePoint4D

setmetatable(LatticePoint4D, {
    __call = function (cls, ...)
        return cls.new(...)
    end})

function LatticePoint4D.new(xsv, ysv, zsv, wsv)
    local inst = setmetatable({}, LatticePoint4D)
    inst.xsv = xsv;
    inst.ysv = ysv;
    inst.zsv = zsv;
    inst.wsv = wsv;

    local ssv = (xsv + ysv + zsv + wsv) * -0.138196601125011
    inst.dx = -xsv - ssv;
    inst.dy = -ysv - ssv;
    inst.dz = -zsv - ssv;
    inst.dw = -wsv - ssv;

    return inst
end

OpenSimplex2S = {}
OpenSimplex2S.__index = OpenSimplex2S

setmetatable(OpenSimplex2S, {
    __call = function (cls, ...)
        return cls.new(...)
    end})

OpenSimplex2S.GRADIENTS_2D = {}
OpenSimplex2S.GRADIENTS_3D = {}
OpenSimplex2S.GRADIENTS_4D = {}

OpenSimplex2S.LOOKUP_2D = {}
OpenSimplex2S.LOOKUP_3D = {}
OpenSimplex2S.LOOKUP_4D = {}

OpenSimplex2S.N2 = 0.05481866495625118
OpenSimplex2S.N3 = 0.2781926117527186
OpenSimplex2S.N4 = 0.11127401889945551

OpenSimplex2S.PMASK = 2047
OpenSimplex2S.PSIZE = 2048

OpenSimplex2S.grad2 = {
    Grad2.new( 0.130526192220052,  0.99144486137381),
    Grad2.new( 0.38268343236509,   0.923879532511287),
    Grad2.new( 0.608761429008721,  0.793353340291235),
    Grad2.new( 0.793353340291235,  0.608761429008721),
    Grad2.new( 0.923879532511287,  0.38268343236509),
    Grad2.new( 0.99144486137381,   0.130526192220051),
    Grad2.new( 0.99144486137381,  -0.130526192220051),
    Grad2.new( 0.923879532511287, -0.38268343236509),
    Grad2.new( 0.793353340291235, -0.60876142900872),
    Grad2.new( 0.608761429008721, -0.793353340291235),
    Grad2.new( 0.38268343236509,  -0.923879532511287),
    Grad2.new( 0.130526192220052, -0.99144486137381),
    Grad2.new(-0.130526192220052, -0.99144486137381),
    Grad2.new(-0.38268343236509,  -0.923879532511287),
    Grad2.new(-0.608761429008721, -0.793353340291235),
    Grad2.new(-0.793353340291235, -0.608761429008721),
    Grad2.new(-0.923879532511287, -0.38268343236509),
    Grad2.new(-0.99144486137381,  -0.130526192220052),
    Grad2.new(-0.99144486137381,   0.130526192220051),
    Grad2.new(-0.923879532511287,  0.38268343236509),
    Grad2.new(-0.793353340291235,  0.608761429008721),
    Grad2.new(-0.608761429008721,  0.793353340291235),
    Grad2.new(-0.38268343236509,   0.923879532511287),
    Grad2.new(-0.130526192220052,  0.99144486137381)
}
OpenSimplex2S.grad2XBeforeY = {} -- Never used. [JB]

OpenSimplex2S.grad3 = {
    Grad3.new(-2.22474487139, -2.22474487139, -1.0),
    Grad3.new(-2.22474487139, -2.22474487139, 1.0),
    Grad3.new(-3.0862664687972017, -1.1721513422464978, 0.0),
    Grad3.new(-1.1721513422464978, -3.0862664687972017, 0.0),
    Grad3.new(-2.22474487139, -1.0, -2.22474487139),
    Grad3.new(-2.22474487139, 1.0, -2.22474487139),
    Grad3.new(-1.1721513422464978, 0.0, -3.0862664687972017),
    Grad3.new(-3.0862664687972017, 0.0, -1.1721513422464978),
    Grad3.new(-2.22474487139, -1.0, 2.22474487139),
    Grad3.new(-2.22474487139, 1.0, 2.22474487139),
    Grad3.new(-3.0862664687972017, 0.0, 1.1721513422464978),
    Grad3.new(-1.1721513422464978, 0.0, 3.0862664687972017),
    Grad3.new(-2.22474487139, 2.22474487139, -1.0),
    Grad3.new(-2.22474487139, 2.22474487139, 1.0),
    Grad3.new(-1.1721513422464978, 3.0862664687972017, 0.0),
    Grad3.new(-3.0862664687972017, 1.1721513422464978, 0.0),
    Grad3.new(-1.0, -2.22474487139, -2.22474487139),
    Grad3.new(1.0, -2.22474487139, -2.22474487139),
    Grad3.new(0.0, -3.0862664687972017, -1.1721513422464978),
    Grad3.new(0.0, -1.1721513422464978, -3.0862664687972017),
    Grad3.new(-1.0, -2.22474487139, 2.22474487139),
    Grad3.new(1.0, -2.22474487139, 2.22474487139),
    Grad3.new(0.0, -1.1721513422464978, 3.0862664687972017),
    Grad3.new(0.0, -3.0862664687972017, 1.1721513422464978),
    Grad3.new(-1.0, 2.22474487139, -2.22474487139),
    Grad3.new(1.0, 2.22474487139, -2.22474487139),
    Grad3.new(0.0, 1.1721513422464978, -3.0862664687972017),
    Grad3.new(0.0, 3.0862664687972017, -1.1721513422464978),
    Grad3.new(-1.0, 2.22474487139, 2.22474487139),
    Grad3.new(1.0, 2.22474487139, 2.22474487139),
    Grad3.new(0.0, 3.0862664687972017, 1.1721513422464978),
    Grad3.new(0.0, 1.1721513422464978, 3.0862664687972017),
    Grad3.new(2.22474487139, -2.22474487139, -1.0),
    Grad3.new(2.22474487139, -2.22474487139, 1.0),
    Grad3.new(1.1721513422464978, -3.0862664687972017, 0.0),
    Grad3.new(3.0862664687972017, -1.1721513422464978, 0.0),
    Grad3.new(2.22474487139, -1.0, -2.22474487139),
    Grad3.new(2.22474487139, 1.0, -2.22474487139),
    Grad3.new(3.0862664687972017, 0.0, -1.1721513422464978),
    Grad3.new(1.1721513422464978, 0.0, -3.0862664687972017),
    Grad3.new(2.22474487139, -1.0, 2.22474487139),
    Grad3.new(2.22474487139, 1.0, 2.22474487139),
    Grad3.new(1.1721513422464978, 0.0, 3.0862664687972017),
    Grad3.new(3.0862664687972017, 0.0, 1.1721513422464978),
    Grad3.new(2.22474487139, 2.22474487139, -1.0),
    Grad3.new(2.22474487139, 2.22474487139, 1.0),
    Grad3.new(3.0862664687972017, 1.1721513422464978, 0.0),
    Grad3.new(1.1721513422464978, 3.0862664687972017, 0.0)
}

OpenSimplex2S.grad4 = {
    Grad4.new(-0.753341017856078, -0.37968289875261624, -0.37968289875261624, -0.37968289875261624),
    Grad4.new(-0.7821684431180708, -0.4321472685365301, -0.4321472685365301, 0.12128480194602098),
    Grad4.new(-0.7821684431180708, -0.4321472685365301, 0.12128480194602098, -0.4321472685365301),
    Grad4.new(-0.7821684431180708, 0.12128480194602098, -0.4321472685365301, -0.4321472685365301),
    Grad4.new(-0.8586508742123365, -0.508629699630796, 0.044802370851755174, 0.044802370851755174),
    Grad4.new(-0.8586508742123365, 0.044802370851755174, -0.508629699630796, 0.044802370851755174),
    Grad4.new(-0.8586508742123365, 0.044802370851755174, 0.044802370851755174, -0.508629699630796),
    Grad4.new(-0.9982828964265062, -0.03381941603233842, -0.03381941603233842, -0.03381941603233842),
    Grad4.new(-0.37968289875261624, -0.753341017856078, -0.37968289875261624, -0.37968289875261624),
    Grad4.new(-0.4321472685365301, -0.7821684431180708, -0.4321472685365301, 0.12128480194602098),
    Grad4.new(-0.4321472685365301, -0.7821684431180708, 0.12128480194602098, -0.4321472685365301),
    Grad4.new(0.12128480194602098, -0.7821684431180708, -0.4321472685365301, -0.4321472685365301),
    Grad4.new(-0.508629699630796, -0.8586508742123365, 0.044802370851755174, 0.044802370851755174),
    Grad4.new(0.044802370851755174, -0.8586508742123365, -0.508629699630796, 0.044802370851755174),
    Grad4.new(0.044802370851755174, -0.8586508742123365, 0.044802370851755174, -0.508629699630796),
    Grad4.new(-0.03381941603233842, -0.9982828964265062, -0.03381941603233842, -0.03381941603233842),
    Grad4.new(-0.37968289875261624, -0.37968289875261624, -0.753341017856078, -0.37968289875261624),
    Grad4.new(-0.4321472685365301, -0.4321472685365301, -0.7821684431180708, 0.12128480194602098),
    Grad4.new(-0.4321472685365301, 0.12128480194602098, -0.7821684431180708, -0.4321472685365301),
    Grad4.new(0.12128480194602098, -0.4321472685365301, -0.7821684431180708, -0.4321472685365301),
    Grad4.new(-0.508629699630796, 0.044802370851755174, -0.8586508742123365, 0.044802370851755174),
    Grad4.new(0.044802370851755174, -0.508629699630796, -0.8586508742123365, 0.044802370851755174),
    Grad4.new(0.044802370851755174, 0.044802370851755174, -0.8586508742123365, -0.508629699630796),
    Grad4.new(-0.03381941603233842, -0.03381941603233842, -0.9982828964265062, -0.03381941603233842),
    Grad4.new(-0.37968289875261624, -0.37968289875261624, -0.37968289875261624, -0.753341017856078),
    Grad4.new(-0.4321472685365301, -0.4321472685365301, 0.12128480194602098, -0.7821684431180708),
    Grad4.new(-0.4321472685365301, 0.12128480194602098, -0.4321472685365301, -0.7821684431180708),
    Grad4.new(0.12128480194602098, -0.4321472685365301, -0.4321472685365301, -0.7821684431180708),
    Grad4.new(-0.508629699630796, 0.044802370851755174, 0.044802370851755174, -0.8586508742123365),
    Grad4.new(0.044802370851755174, -0.508629699630796, 0.044802370851755174, -0.8586508742123365),
    Grad4.new(0.044802370851755174, 0.044802370851755174, -0.508629699630796, -0.8586508742123365),
    Grad4.new(-0.03381941603233842, -0.03381941603233842, -0.03381941603233842, -0.9982828964265062),
    Grad4.new(-0.6740059517812944, -0.3239847771997537, -0.3239847771997537, 0.5794684678643381),
    Grad4.new(-0.7504883828755602, -0.4004672082940195, 0.15296486218853164, 0.5029860367700724),
    Grad4.new(-0.7504883828755602, 0.15296486218853164, -0.4004672082940195, 0.5029860367700724),
    Grad4.new(-0.8828161875373585, 0.08164729285680945, 0.08164729285680945, 0.4553054119602712),
    Grad4.new(-0.4553054119602712, -0.08164729285680945, -0.08164729285680945, 0.8828161875373585),
    Grad4.new(-0.5029860367700724, -0.15296486218853164, 0.4004672082940195, 0.7504883828755602),
    Grad4.new(-0.5029860367700724, 0.4004672082940195, -0.15296486218853164, 0.7504883828755602),
    Grad4.new(-0.5794684678643381, 0.3239847771997537, 0.3239847771997537, 0.6740059517812944),
    Grad4.new(-0.3239847771997537, -0.6740059517812944, -0.3239847771997537, 0.5794684678643381),
    Grad4.new(-0.4004672082940195, -0.7504883828755602, 0.15296486218853164, 0.5029860367700724),
    Grad4.new(0.15296486218853164, -0.7504883828755602, -0.4004672082940195, 0.5029860367700724),
    Grad4.new(0.08164729285680945, -0.8828161875373585, 0.08164729285680945, 0.4553054119602712),
    Grad4.new(-0.08164729285680945, -0.4553054119602712, -0.08164729285680945, 0.8828161875373585),
    Grad4.new(-0.15296486218853164, -0.5029860367700724, 0.4004672082940195, 0.7504883828755602),
    Grad4.new(0.4004672082940195, -0.5029860367700724, -0.15296486218853164, 0.7504883828755602),
    Grad4.new(0.3239847771997537, -0.5794684678643381, 0.3239847771997537, 0.6740059517812944),
    Grad4.new(-0.3239847771997537, -0.3239847771997537, -0.6740059517812944, 0.5794684678643381),
    Grad4.new(-0.4004672082940195, 0.15296486218853164, -0.7504883828755602, 0.5029860367700724),
    Grad4.new(0.15296486218853164, -0.4004672082940195, -0.7504883828755602, 0.5029860367700724),
    Grad4.new(0.08164729285680945, 0.08164729285680945, -0.8828161875373585, 0.4553054119602712),
    Grad4.new(-0.08164729285680945, -0.08164729285680945, -0.4553054119602712, 0.8828161875373585),
    Grad4.new(-0.15296486218853164, 0.4004672082940195, -0.5029860367700724, 0.7504883828755602),
    Grad4.new(0.4004672082940195, -0.15296486218853164, -0.5029860367700724, 0.7504883828755602),
    Grad4.new(0.3239847771997537, 0.3239847771997537, -0.5794684678643381, 0.6740059517812944),
    Grad4.new(-0.6740059517812944, -0.3239847771997537, 0.5794684678643381, -0.3239847771997537),
    Grad4.new(-0.7504883828755602, -0.4004672082940195, 0.5029860367700724, 0.15296486218853164),
    Grad4.new(-0.7504883828755602, 0.15296486218853164, 0.5029860367700724, -0.4004672082940195),
    Grad4.new(-0.8828161875373585, 0.08164729285680945, 0.4553054119602712, 0.08164729285680945),
    Grad4.new(-0.4553054119602712, -0.08164729285680945, 0.8828161875373585, -0.08164729285680945),
    Grad4.new(-0.5029860367700724, -0.15296486218853164, 0.7504883828755602, 0.4004672082940195),
    Grad4.new(-0.5029860367700724, 0.4004672082940195, 0.7504883828755602, -0.15296486218853164),
    Grad4.new(-0.5794684678643381, 0.3239847771997537, 0.6740059517812944, 0.3239847771997537),
    Grad4.new(-0.3239847771997537, -0.6740059517812944, 0.5794684678643381, -0.3239847771997537),
    Grad4.new(-0.4004672082940195, -0.7504883828755602, 0.5029860367700724, 0.15296486218853164),
    Grad4.new(0.15296486218853164, -0.7504883828755602, 0.5029860367700724, -0.4004672082940195),
    Grad4.new(0.08164729285680945, -0.8828161875373585, 0.4553054119602712, 0.08164729285680945),
    Grad4.new(-0.08164729285680945, -0.4553054119602712, 0.8828161875373585, -0.08164729285680945),
    Grad4.new(-0.15296486218853164, -0.5029860367700724, 0.7504883828755602, 0.4004672082940195),
    Grad4.new(0.4004672082940195, -0.5029860367700724, 0.7504883828755602, -0.15296486218853164),
    Grad4.new(0.3239847771997537, -0.5794684678643381, 0.6740059517812944, 0.3239847771997537),
    Grad4.new(-0.3239847771997537, -0.3239847771997537, 0.5794684678643381, -0.6740059517812944),
    Grad4.new(-0.4004672082940195, 0.15296486218853164, 0.5029860367700724, -0.7504883828755602),
    Grad4.new(0.15296486218853164, -0.4004672082940195, 0.5029860367700724, -0.7504883828755602),
    Grad4.new(0.08164729285680945, 0.08164729285680945, 0.4553054119602712, -0.8828161875373585),
    Grad4.new(-0.08164729285680945, -0.08164729285680945, 0.8828161875373585, -0.4553054119602712),
    Grad4.new(-0.15296486218853164, 0.4004672082940195, 0.7504883828755602, -0.5029860367700724),
    Grad4.new(0.4004672082940195, -0.15296486218853164, 0.7504883828755602, -0.5029860367700724),
    Grad4.new(0.3239847771997537, 0.3239847771997537, 0.6740059517812944, -0.5794684678643381),
    Grad4.new(-0.6740059517812944, 0.5794684678643381, -0.3239847771997537, -0.3239847771997537),
    Grad4.new(-0.7504883828755602, 0.5029860367700724, -0.4004672082940195, 0.15296486218853164),
    Grad4.new(-0.7504883828755602, 0.5029860367700724, 0.15296486218853164, -0.4004672082940195),
    Grad4.new(-0.8828161875373585, 0.4553054119602712, 0.08164729285680945, 0.08164729285680945),
    Grad4.new(-0.4553054119602712, 0.8828161875373585, -0.08164729285680945, -0.08164729285680945),
    Grad4.new(-0.5029860367700724, 0.7504883828755602, -0.15296486218853164, 0.4004672082940195),
    Grad4.new(-0.5029860367700724, 0.7504883828755602, 0.4004672082940195, -0.15296486218853164),
    Grad4.new(-0.5794684678643381, 0.6740059517812944, 0.3239847771997537, 0.3239847771997537),
    Grad4.new(-0.3239847771997537, 0.5794684678643381, -0.6740059517812944, -0.3239847771997537),
    Grad4.new(-0.4004672082940195, 0.5029860367700724, -0.7504883828755602, 0.15296486218853164),
    Grad4.new(0.15296486218853164, 0.5029860367700724, -0.7504883828755602, -0.4004672082940195),
    Grad4.new(0.08164729285680945, 0.4553054119602712, -0.8828161875373585, 0.08164729285680945),
    Grad4.new(-0.08164729285680945, 0.8828161875373585, -0.4553054119602712, -0.08164729285680945),
    Grad4.new(-0.15296486218853164, 0.7504883828755602, -0.5029860367700724, 0.4004672082940195),
    Grad4.new(0.4004672082940195, 0.7504883828755602, -0.5029860367700724, -0.15296486218853164),
    Grad4.new(0.3239847771997537, 0.6740059517812944, -0.5794684678643381, 0.3239847771997537),
    Grad4.new(-0.3239847771997537, 0.5794684678643381, -0.3239847771997537, -0.6740059517812944),
    Grad4.new(-0.4004672082940195, 0.5029860367700724, 0.15296486218853164, -0.7504883828755602),
    Grad4.new(0.15296486218853164, 0.5029860367700724, -0.4004672082940195, -0.7504883828755602),
    Grad4.new(0.08164729285680945, 0.4553054119602712, 0.08164729285680945, -0.8828161875373585),
    Grad4.new(-0.08164729285680945, 0.8828161875373585, -0.08164729285680945, -0.4553054119602712),
    Grad4.new(-0.15296486218853164, 0.7504883828755602, 0.4004672082940195, -0.5029860367700724),
    Grad4.new(0.4004672082940195, 0.7504883828755602, -0.15296486218853164, -0.5029860367700724),
    Grad4.new(0.3239847771997537, 0.6740059517812944, 0.3239847771997537, -0.5794684678643381),
    Grad4.new(0.5794684678643381, -0.6740059517812944, -0.3239847771997537, -0.3239847771997537),
    Grad4.new(0.5029860367700724, -0.7504883828755602, -0.4004672082940195, 0.15296486218853164),
    Grad4.new(0.5029860367700724, -0.7504883828755602, 0.15296486218853164, -0.4004672082940195),
    Grad4.new(0.4553054119602712, -0.8828161875373585, 0.08164729285680945, 0.08164729285680945),
    Grad4.new(0.8828161875373585, -0.4553054119602712, -0.08164729285680945, -0.08164729285680945),
    Grad4.new(0.7504883828755602, -0.5029860367700724, -0.15296486218853164, 0.4004672082940195),
    Grad4.new(0.7504883828755602, -0.5029860367700724, 0.4004672082940195, -0.15296486218853164),
    Grad4.new(0.6740059517812944, -0.5794684678643381, 0.3239847771997537, 0.3239847771997537),
    Grad4.new(0.5794684678643381, -0.3239847771997537, -0.6740059517812944, -0.3239847771997537),
    Grad4.new(0.5029860367700724, -0.4004672082940195, -0.7504883828755602, 0.15296486218853164),
    Grad4.new(0.5029860367700724, 0.15296486218853164, -0.7504883828755602, -0.4004672082940195),
    Grad4.new(0.4553054119602712, 0.08164729285680945, -0.8828161875373585, 0.08164729285680945),
    Grad4.new(0.8828161875373585, -0.08164729285680945, -0.4553054119602712, -0.08164729285680945),
    Grad4.new(0.7504883828755602, -0.15296486218853164, -0.5029860367700724, 0.4004672082940195),
    Grad4.new(0.7504883828755602, 0.4004672082940195, -0.5029860367700724, -0.15296486218853164),
    Grad4.new(0.6740059517812944, 0.3239847771997537, -0.5794684678643381, 0.3239847771997537),
    Grad4.new(0.5794684678643381, -0.3239847771997537, -0.3239847771997537, -0.6740059517812944),
    Grad4.new(0.5029860367700724, -0.4004672082940195, 0.15296486218853164, -0.7504883828755602),
    Grad4.new(0.5029860367700724, 0.15296486218853164, -0.4004672082940195, -0.7504883828755602),
    Grad4.new(0.4553054119602712, 0.08164729285680945, 0.08164729285680945, -0.8828161875373585),
    Grad4.new(0.8828161875373585, -0.08164729285680945, -0.08164729285680945, -0.4553054119602712),
    Grad4.new(0.7504883828755602, -0.15296486218853164, 0.4004672082940195, -0.5029860367700724),
    Grad4.new(0.7504883828755602, 0.4004672082940195, -0.15296486218853164, -0.5029860367700724),
    Grad4.new(0.6740059517812944, 0.3239847771997537, 0.3239847771997537, -0.5794684678643381),
    Grad4.new(0.03381941603233842, 0.03381941603233842, 0.03381941603233842, 0.9982828964265062),
    Grad4.new(-0.044802370851755174, -0.044802370851755174, 0.508629699630796, 0.8586508742123365),
    Grad4.new(-0.044802370851755174, 0.508629699630796, -0.044802370851755174, 0.8586508742123365),
    Grad4.new(-0.12128480194602098, 0.4321472685365301, 0.4321472685365301, 0.7821684431180708),
    Grad4.new(0.508629699630796, -0.044802370851755174, -0.044802370851755174, 0.8586508742123365),
    Grad4.new(0.4321472685365301, -0.12128480194602098, 0.4321472685365301, 0.7821684431180708),
    Grad4.new(0.4321472685365301, 0.4321472685365301, -0.12128480194602098, 0.7821684431180708),
    Grad4.new(0.37968289875261624, 0.37968289875261624, 0.37968289875261624, 0.753341017856078),
    Grad4.new(0.03381941603233842, 0.03381941603233842, 0.9982828964265062, 0.03381941603233842),
    Grad4.new(-0.044802370851755174, 0.044802370851755174, 0.8586508742123365, 0.508629699630796),
    Grad4.new(-0.044802370851755174, 0.508629699630796, 0.8586508742123365, -0.044802370851755174),
    Grad4.new(-0.12128480194602098, 0.4321472685365301, 0.7821684431180708, 0.4321472685365301),
    Grad4.new(0.508629699630796, -0.044802370851755174, 0.8586508742123365, -0.044802370851755174),
    Grad4.new(0.4321472685365301, -0.12128480194602098, 0.7821684431180708, 0.4321472685365301),
    Grad4.new(0.4321472685365301, 0.4321472685365301, 0.7821684431180708, -0.12128480194602098),
    Grad4.new(0.37968289875261624, 0.37968289875261624, 0.753341017856078, 0.37968289875261624),
    Grad4.new(0.03381941603233842, 0.9982828964265062, 0.03381941603233842, 0.03381941603233842),
    Grad4.new(-0.044802370851755174, 0.8586508742123365, -0.044802370851755174, 0.508629699630796),
    Grad4.new(-0.044802370851755174, 0.8586508742123365, 0.508629699630796, -0.044802370851755174),
    Grad4.new(-0.12128480194602098, 0.7821684431180708, 0.4321472685365301, 0.4321472685365301),
    Grad4.new(0.508629699630796, 0.8586508742123365, -0.044802370851755174, -0.044802370851755174),
    Grad4.new(0.4321472685365301, 0.7821684431180708, -0.12128480194602098, 0.4321472685365301),
    Grad4.new(0.4321472685365301, 0.7821684431180708, 0.4321472685365301, -0.12128480194602098),
    Grad4.new(0.37968289875261624, 0.753341017856078, 0.37968289875261624, 0.37968289875261624),
    Grad4.new(0.9982828964265062, 0.03381941603233842, 0.03381941603233842, 0.03381941603233842),
    Grad4.new(0.8586508742123365, -0.044802370851755174, -0.044802370851755174, 0.508629699630796),
    Grad4.new(0.8586508742123365, -0.044802370851755174, 0.508629699630796, -0.044802370851755174),
    Grad4.new(0.7821684431180708, -0.12128480194602098, 0.4321472685365301, 0.4321472685365301),
    Grad4.new(0.8586508742123365, 0.508629699630796, -0.044802370851755174, -0.044802370851755174),
    Grad4.new(0.7821684431180708, 0.4321472685365301, -0.12128480194602098, 0.4321472685365301),
    Grad4.new(0.7821684431180708, 0.4321472685365301, 0.4321472685365301, -0.12128480194602098),
    Grad4.new(0.753341017856078, 0.37968289875261624, 0.37968289875261624, 0.37968289875261624)
}

OpenSimplex2S.latticePoints = {}
OpenSimplex2S.lookup4DPregen = {
    { 0x15, 0x45, 0x51, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA },
    { 0x15, 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xAA },
    { 0x01, 0x05, 0x11, 0x15, 0x41, 0x45, 0x51, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA },
    { 0x01, 0x15, 0x16, 0x45, 0x46, 0x51, 0x52, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB },
    { 0x15, 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA9, 0xAA },
    { 0x05, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xAA },
    { 0x05, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xAA },
    { 0x05, 0x15, 0x16, 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xAA, 0xAB },
    { 0x04, 0x05, 0x14, 0x15, 0x44, 0x45, 0x54, 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA },
    { 0x05, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xAA },
    { 0x05, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x9A, 0xAA },
    { 0x05, 0x15, 0x16, 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x5B, 0x6A, 0x9A, 0xAA, 0xAB },
    { 0x04, 0x15, 0x19, 0x45, 0x49, 0x54, 0x55, 0x58, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE },
    { 0x05, 0x15, 0x19, 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xAA, 0xAE },
    { 0x05, 0x15, 0x19, 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x5E, 0x6A, 0x9A, 0xAA, 0xAE },
    { 0x05, 0x15, 0x1A, 0x45, 0x4A, 0x55, 0x56, 0x59, 0x5A, 0x5B, 0x5E, 0x6A, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF },
    { 0x15, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0xA5, 0xA6, 0xA9, 0xAA },
    { 0x11, 0x15, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xAA },
    { 0x11, 0x15, 0x51, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x96, 0xA6, 0xAA },
    { 0x11, 0x15, 0x16, 0x51, 0x52, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x96, 0xA6, 0xAA, 0xAB },
    { 0x14, 0x15, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA9, 0xAA },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x9A, 0xA6, 0xA9, 0xAA },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB },
    { 0x15, 0x16, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x6B, 0x96, 0x9A, 0xA6, 0xAA, 0xAB },
    { 0x14, 0x15, 0x54, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x99, 0xA9, 0xAA },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x9A, 0xAA },
    { 0x15, 0x16, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x6B, 0x9A, 0xAA, 0xAB },
    { 0x14, 0x15, 0x19, 0x54, 0x55, 0x58, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x99, 0xA9, 0xAA, 0xAE },
    { 0x15, 0x19, 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x6E, 0x99, 0x9A, 0xA9, 0xAA, 0xAE },
    { 0x15, 0x19, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x6E, 0x9A, 0xAA, 0xAE },
    { 0x15, 0x1A, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x6B, 0x6E, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF },
    { 0x10, 0x11, 0x14, 0x15, 0x50, 0x51, 0x54, 0x55, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA },
    { 0x11, 0x15, 0x51, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xAA },
    { 0x11, 0x15, 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0xA6, 0xAA },
    { 0x11, 0x15, 0x16, 0x51, 0x52, 0x55, 0x56, 0x65, 0x66, 0x67, 0x6A, 0xA6, 0xAA, 0xAB },
    { 0x14, 0x15, 0x54, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA9, 0xAA },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA6, 0xAA },
    { 0x15, 0x16, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x6B, 0xA6, 0xAA, 0xAB },
    { 0x14, 0x15, 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0xA9, 0xAA },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA9, 0xAA },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xAA },
    { 0x15, 0x16, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6B, 0xAA, 0xAB },
    { 0x14, 0x15, 0x19, 0x54, 0x55, 0x58, 0x59, 0x65, 0x69, 0x6A, 0x6D, 0xA9, 0xAA, 0xAE },
    { 0x15, 0x19, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x6E, 0xA9, 0xAA, 0xAE },
    { 0x15, 0x19, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6E, 0xAA, 0xAE },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x69, 0x6A, 0x6B, 0x6E, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF },
    { 0x10, 0x15, 0x25, 0x51, 0x54, 0x55, 0x61, 0x64, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA },
    { 0x11, 0x15, 0x25, 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xAA, 0xBA },
    { 0x11, 0x15, 0x25, 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x6A, 0x76, 0xA6, 0xAA, 0xBA },
    { 0x11, 0x15, 0x26, 0x51, 0x55, 0x56, 0x62, 0x65, 0x66, 0x67, 0x6A, 0x76, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB },
    { 0x14, 0x15, 0x25, 0x54, 0x55, 0x59, 0x64, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA9, 0xAA, 0xBA },
    { 0x15, 0x25, 0x55, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA },
    { 0x15, 0x25, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xA6, 0xAA, 0xBA },
    { 0x15, 0x26, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x6B, 0x7A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB },
    { 0x14, 0x15, 0x25, 0x54, 0x55, 0x59, 0x64, 0x65, 0x69, 0x6A, 0x79, 0xA9, 0xAA, 0xBA },
    { 0x15, 0x25, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xA9, 0xAA, 0xBA },
    { 0x15, 0x25, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xAA, 0xBA },
    { 0x15, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6B, 0x7A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB },
    { 0x14, 0x15, 0x29, 0x54, 0x55, 0x59, 0x65, 0x68, 0x69, 0x6A, 0x6D, 0x79, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE },
    { 0x15, 0x29, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x6E, 0x7A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE },
    { 0x15, 0x55, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6E, 0x7A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6B, 0x6E, 0x7A, 0xAA, 0xAB, 0xAE, 0xBA, 0xBF },
    { 0x45, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA },
    { 0x41, 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xAA },
    { 0x41, 0x45, 0x51, 0x55, 0x56, 0x5A, 0x66, 0x95, 0x96, 0x9A, 0xA6, 0xAA },
    { 0x41, 0x45, 0x46, 0x51, 0x52, 0x55, 0x56, 0x5A, 0x66, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB },
    { 0x44, 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA9, 0xAA },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xAB },
    { 0x45, 0x46, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB },
    { 0x44, 0x45, 0x54, 0x55, 0x59, 0x5A, 0x69, 0x95, 0x99, 0x9A, 0xA9, 0xAA },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xAE },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xAA },
    { 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x96, 0x9A, 0x9B, 0xAA, 0xAB },
    { 0x44, 0x45, 0x49, 0x54, 0x55, 0x58, 0x59, 0x5A, 0x69, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE },
    { 0x45, 0x49, 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE },
    { 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x99, 0x9A, 0x9E, 0xAA, 0xAE },
    { 0x45, 0x4A, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x9A, 0x9B, 0x9E, 0xAA, 0xAB, 0xAE, 0xAF },
    { 0x50, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x95, 0x96, 0x99, 0xA5, 0xA6, 0xA9, 0xAA },
    { 0x51, 0x55, 0x56, 0x59, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA },
    { 0x51, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xAB },
    { 0x51, 0x52, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xA7, 0xAA, 0xAB },
    { 0x54, 0x55, 0x56, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA },
    { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA },
    { 0x15, 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB },
    { 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB },
    { 0x54, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAE },
    { 0x15, 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE },
    { 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE },
    { 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB },
    { 0x54, 0x55, 0x58, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAD, 0xAE },
    { 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE },
    { 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE },
    { 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF },
    { 0x50, 0x51, 0x54, 0x55, 0x65, 0x66, 0x69, 0x95, 0xA5, 0xA6, 0xA9, 0xAA },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xAA },
    { 0x51, 0x52, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x96, 0xA6, 0xA7, 0xAA, 0xAB },
    { 0x54, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA },
    { 0x15, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA },
    { 0x15, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xBA },
    { 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA9, 0xAA },
    { 0x15, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xBA },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x9A, 0xA6, 0xA9, 0xAA },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB },
    { 0x54, 0x55, 0x58, 0x59, 0x65, 0x69, 0x6A, 0x99, 0xA9, 0xAA, 0xAD, 0xAE },
    { 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x69, 0x6A, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF },
    { 0x50, 0x51, 0x54, 0x55, 0x61, 0x64, 0x65, 0x66, 0x69, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA },
    { 0x51, 0x55, 0x61, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA },
    { 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x6A, 0xA5, 0xA6, 0xAA, 0xB6, 0xBA },
    { 0x51, 0x55, 0x56, 0x62, 0x65, 0x66, 0x6A, 0xA6, 0xA7, 0xAA, 0xAB, 0xB6, 0xBA, 0xBB },
    { 0x54, 0x55, 0x64, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA },
    { 0x55, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA },
    { 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA },
    { 0x55, 0x56, 0x65, 0x66, 0x6A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB },
    { 0x54, 0x55, 0x59, 0x64, 0x65, 0x69, 0x6A, 0xA5, 0xA9, 0xAA, 0xB9, 0xBA },
    { 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA },
    { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA },
    { 0x15, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB },
    { 0x54, 0x55, 0x59, 0x65, 0x68, 0x69, 0x6A, 0xA9, 0xAA, 0xAD, 0xAE, 0xB9, 0xBA, 0xBE },
    { 0x55, 0x59, 0x65, 0x69, 0x6A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE },
    { 0x15, 0x55, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE },
    { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xAA, 0xAB, 0xAE, 0xBA, 0xBF },
    { 0x40, 0x41, 0x44, 0x45, 0x50, 0x51, 0x54, 0x55, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA },
    { 0x41, 0x45, 0x51, 0x55, 0x56, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xAA },
    { 0x41, 0x45, 0x51, 0x55, 0x56, 0x95, 0x96, 0x9A, 0xA6, 0xAA },
    { 0x41, 0x45, 0x46, 0x51, 0x52, 0x55, 0x56, 0x95, 0x96, 0x97, 0x9A, 0xA6, 0xAA, 0xAB },
    { 0x44, 0x45, 0x54, 0x55, 0x59, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA9, 0xAA },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA },
    { 0x45, 0x46, 0x55, 0x56, 0x5A, 0x95, 0x96, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB },
    { 0x44, 0x45, 0x54, 0x55, 0x59, 0x95, 0x99, 0x9A, 0xA9, 0xAA },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xAA },
    { 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9B, 0xAA, 0xAB },
    { 0x44, 0x45, 0x49, 0x54, 0x55, 0x58, 0x59, 0x95, 0x99, 0x9A, 0x9D, 0xA9, 0xAA, 0xAE },
    { 0x45, 0x49, 0x55, 0x59, 0x5A, 0x95, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE },
    { 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9E, 0xAA, 0xAE },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x96, 0x99, 0x9A, 0x9B, 0x9E, 0xAA, 0xAB, 0xAE, 0xAF },
    { 0x50, 0x51, 0x54, 0x55, 0x65, 0x95, 0x96, 0x99, 0xA5, 0xA6, 0xA9, 0xAA },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA },
    { 0x51, 0x52, 0x55, 0x56, 0x66, 0x95, 0x96, 0x9A, 0xA6, 0xA7, 0xAA, 0xAB },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA },
    { 0x45, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA },
    { 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xEA },
    { 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA },
    { 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xEA },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xAB },
    { 0x54, 0x55, 0x58, 0x59, 0x69, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAD, 0xAE },
    { 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xAE },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x96, 0x99, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF },
    { 0x50, 0x51, 0x54, 0x55, 0x65, 0x95, 0xA5, 0xA6, 0xA9, 0xAA },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xAA },
    { 0x51, 0x52, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA },
    { 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA },
    { 0x51, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xAB },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA },
    { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA },
    { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB },
    { 0x54, 0x55, 0x58, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE },
    { 0x54, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAE },
    { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAE },
    { 0x55, 0x56, 0x59, 0x5A, 0x66, 0x69, 0x6A, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xAF },
    { 0x50, 0x51, 0x54, 0x55, 0x61, 0x64, 0x65, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xB5, 0xBA },
    { 0x51, 0x55, 0x61, 0x65, 0x66, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA },
    { 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xAA, 0xB6, 0xBA },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x96, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB, 0xB6, 0xBA, 0xBB },
    { 0x54, 0x55, 0x64, 0x65, 0x69, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA },
    { 0x55, 0x65, 0x66, 0x69, 0x6A, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x96, 0xA5, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB },
    { 0x54, 0x55, 0x59, 0x64, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xB9, 0xBA },
    { 0x54, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA },
    { 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA },
    { 0x55, 0x56, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xBA, 0xBB },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x99, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE, 0xB9, 0xBA, 0xBE },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x99, 0xA5, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE },
    { 0x55, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE },
    { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xBA },
    { 0x40, 0x45, 0x51, 0x54, 0x55, 0x85, 0x91, 0x94, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA },
    { 0x41, 0x45, 0x51, 0x55, 0x56, 0x85, 0x91, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xAA, 0xEA },
    { 0x41, 0x45, 0x51, 0x55, 0x56, 0x85, 0x91, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xD6, 0xEA },
    { 0x41, 0x45, 0x51, 0x55, 0x56, 0x86, 0x92, 0x95, 0x96, 0x97, 0x9A, 0xA6, 0xAA, 0xAB, 0xD6, 0xEA, 0xEB },
    { 0x44, 0x45, 0x54, 0x55, 0x59, 0x85, 0x94, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xEA },
    { 0x45, 0x55, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xDA, 0xEA },
    { 0x45, 0x55, 0x56, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xDA, 0xEA },
    { 0x45, 0x55, 0x56, 0x86, 0x95, 0x96, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB, 0xDA, 0xEA, 0xEB },
    { 0x44, 0x45, 0x54, 0x55, 0x59, 0x85, 0x94, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xD9, 0xEA },
    { 0x45, 0x55, 0x59, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xDA, 0xEA },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xAA, 0xDA, 0xEA },
    { 0x45, 0x55, 0x56, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB, 0xDA, 0xEA, 0xEB },
    { 0x44, 0x45, 0x54, 0x55, 0x59, 0x89, 0x95, 0x98, 0x99, 0x9A, 0x9D, 0xA9, 0xAA, 0xAE, 0xD9, 0xEA, 0xEE },
    { 0x45, 0x55, 0x59, 0x89, 0x95, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE, 0xDA, 0xEA, 0xEE },
    { 0x45, 0x55, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE, 0xDA, 0xEA, 0xEE },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9B, 0x9E, 0xAA, 0xAB, 0xAE, 0xDA, 0xEA, 0xEF },
    { 0x50, 0x51, 0x54, 0x55, 0x65, 0x91, 0x94, 0x95, 0x96, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA },
    { 0x51, 0x55, 0x91, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xE6, 0xEA },
    { 0x51, 0x55, 0x56, 0x91, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xE6, 0xEA },
    { 0x51, 0x55, 0x56, 0x92, 0x95, 0x96, 0x9A, 0xA6, 0xA7, 0xAA, 0xAB, 0xE6, 0xEA, 0xEB },
    { 0x54, 0x55, 0x94, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xE9, 0xEA },
    { 0x55, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA },
    { 0x55, 0x56, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA },
    { 0x55, 0x56, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB, 0xEA, 0xEB },
    { 0x54, 0x55, 0x59, 0x94, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xE9, 0xEA },
    { 0x55, 0x59, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA },
    { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA },
    { 0x45, 0x55, 0x56, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xAB, 0xEA, 0xEB },
    { 0x54, 0x55, 0x59, 0x95, 0x98, 0x99, 0x9A, 0xA9, 0xAA, 0xAD, 0xAE, 0xE9, 0xEA, 0xEE },
    { 0x55, 0x59, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE },
    { 0x45, 0x55, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE },
    { 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xAA, 0xAB, 0xAE, 0xEA, 0xEF },
    { 0x50, 0x51, 0x54, 0x55, 0x65, 0x91, 0x94, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xE5, 0xEA },
    { 0x51, 0x55, 0x65, 0x91, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xE6, 0xEA },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x91, 0x95, 0x96, 0xA5, 0xA6, 0xAA, 0xE6, 0xEA },
    { 0x51, 0x55, 0x56, 0x66, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB, 0xE6, 0xEA, 0xEB },
    { 0x54, 0x55, 0x65, 0x94, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xE9, 0xEA },
    { 0x55, 0x65, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA },
    { 0x51, 0x55, 0x56, 0x66, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xAB, 0xEA, 0xEB },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x94, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xE9, 0xEA },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA },
    { 0x55, 0x56, 0x59, 0x65, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA },
    { 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xEA, 0xEB },
    { 0x54, 0x55, 0x59, 0x69, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE, 0xE9, 0xEA, 0xEE },
    { 0x54, 0x55, 0x59, 0x69, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE },
    { 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE },
    { 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xEA },
    { 0x50, 0x51, 0x54, 0x55, 0x65, 0x95, 0xA1, 0xA4, 0xA5, 0xA6, 0xA9, 0xAA, 0xB5, 0xBA, 0xE5, 0xEA, 0xFA },
    { 0x51, 0x55, 0x65, 0x95, 0xA1, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA, 0xE6, 0xEA, 0xFA },
    { 0x51, 0x55, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA, 0xE6, 0xEA, 0xFA },
    { 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB, 0xB6, 0xBA, 0xE6, 0xEA, 0xFB },
    { 0x54, 0x55, 0x65, 0x95, 0xA4, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA, 0xE9, 0xEA, 0xFA },
    { 0x55, 0x65, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA },
    { 0x51, 0x55, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA },
    { 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xAA, 0xAB, 0xBA, 0xEA, 0xFB },
    { 0x54, 0x55, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA, 0xE9, 0xEA, 0xFA },
    { 0x54, 0x55, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA },
    { 0x55, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA },
    { 0x55, 0x56, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xBA, 0xEA },
    { 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE, 0xB9, 0xBA, 0xE9, 0xEA, 0xFE },
    { 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xAE, 0xBA, 0xEA, 0xFE },
    { 0x55, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xBA, 0xEA },
    { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xBA, 0xEA },
}

for i = 0, 7, 1 do
    local i1 = 0
    local j1 = 0

    local i2 = 0
    local j2 = 0

    if (i & 1) == 0 then
        if (i & 2) == 0 then
            i1 = -1
            j1 = 0
        else
            i1 = 1
            j1 = 0
        end

        if (i & 4) == 0 then
            i2 = 0
            j2 = -1
        else
            i2 = 0
            j2 = 1
        end
    else
        if (i & 2) ~= 0 then
            i1 = 2
            j1 = 1
        else
            i1 = 0
            j1 = 1
        end

        if (i & 4) ~= 0 then
            i2 = 1
            j2 = 2
        else
            i2 = 1
            j2 = 0
        end
    end

    OpenSimplex2S.LOOKUP_2D[i * 4 + 1] = LatticePoint2D.new(0, 0);
    OpenSimplex2S.LOOKUP_2D[i * 4 + 2] = LatticePoint2D.new(1, 1);
    OpenSimplex2S.LOOKUP_2D[i * 4 + 3] = LatticePoint2D.new(i1, j1);
    OpenSimplex2S.LOOKUP_2D[i * 4 + 4] = LatticePoint2D.new(i2, j2);
end

for i = 0, 7, 1 do
    local i1 = 0
    local j1 = 0
    local k1 = 0

    local i2 = 0
    local j2 = 0
    local k2 = 0

    i1 = (i >> 0) & 1
    j1 = (i >> 1) & 1
    k1 = (i >> 2) & 1

    -- In Lua, ^ is exponentiation, ~ is bit XOR. [JB]
    i2 = i1 ~ 1
    j2 = j1 ~ 1
    k2 = k1 ~ 1

    --The two points within this octant, one from each of the two cubic
    --half-lattices.
    local c0 = LatticePoint3D.new(i1, j1, k1, 0)
    local c1 = LatticePoint3D.new(i1 + i2, j1 + j2, k1 + k2, 1)

    --(1, 0, 0) vs (0, 1, 1) away from octant.
    local c2 = LatticePoint3D.new(i1 ~ 1, j1, k1, 0)
    local c3 = LatticePoint3D.new(i1, j1 ~ 1, k1 ~ 1, 0)

    --(1, 0, 0) vs (0, 1, 1) away from octant, on second half-lattice.
    local c4 = LatticePoint3D.new(i1 + (i2 ~ 1), j1 + j2, k1 + k2, 1)
    local c5 = LatticePoint3D.new(i1 + i2, j1 + (j2 ~ 1), k1 + (k2 ~ 1), 1)

    --(0, 1, 0) vs (1, 0, 1) away from octant.
    local c6 = LatticePoint3D.new(i1, j1 ~ 1, k1, 0)
    local c7 = LatticePoint3D.new(i1 ~ 1, j1, k1 ~ 1, 0)

    --(0, 1, 0) vs (1, 0, 1) away from octant, on second half-lattice.
    local c8 = LatticePoint3D.new(i1 + i2, j1 + (j2 ~ 1), k1 + k2, 1)
    local c9 = LatticePoint3D.new(i1 + (i2 ~ 1), j1 + j2, k1 + (k2 ~ 1), 1)

    --(0, 0, 1) vs (1, 1, 0) away from octant.
    local cA = LatticePoint3D.new(i1, j1, k1 ~ 1, 0);
    local cB = LatticePoint3D.new(i1 ~ 1, j1 ~ 1, k1, 0);

    --(0, 0, 1) vs (1, 1, 0) away from octant, on second half-lattice.
    local cC =LatticePoint3D.new(i1 + i2, j1 + j2, k1 + (k2 ~ 1), 1)
    local cD =LatticePoint3D.new(i1 + (i2 ~ 1), j1 + (j2 ~ 1), k1 + k2, 1)

    --First two points are guaranteed.
    c0.nextOnFailure = c1
    c0.nextOnSuccess = c1
    c1.nextOnFailure = c2
    c1.nextOnSuccess = c2

    --If c2 is in range, then we know c3 and c4 are not.
    c2.nextOnFailure = c3
    c2.nextOnSuccess = c5
    c3.nextOnFailure = c4
    c3.nextOnSuccess = c4

    --If c4 is in range, then we know c5 is not.
    c4.nextOnFailure = c5
    c4.nextOnSuccess = c6
    c5.nextOnFailure = c6
    c5.nextOnSuccess = c6

    --If c6 is in range, then we know c7 and c8 are not.
    c6.nextOnFailure = c7
    c6.nextOnSuccess = c9
    c7.nextOnFailure = c8
    c7.nextOnSuccess = c8

    --If c8 is in range, then we know c9 is not.
    c8.nextOnFailure = c9
    c8.nextOnSuccess = cA
    c9.nextOnFailure = cA
    c9.nextOnSuccess = cA

    --If cA is in range, then we know cB and cC are not.
    cA.nextOnFailure = cB
    cA.nextOnSuccess = cD
    cB.nextOnFailure = cC
    cB.nextOnSuccess = cC

    --If cC is in range, then we know cD is not.
    cC.nextOnFailure = cD
    cC.nextOnSuccess = nil
    cD.nextOnFailure = nil
    cD.nextOnSuccess = nil

    OpenSimplex2S.LOOKUP_3D[1 + i] = c0
end

-- Fill lattice points. [JB]
for i = 0, 255, 1 do
    local cx = ((i >> 0) & 3) - 1
    local cy = ((i >> 2) & 3) - 1
    local cz = ((i >> 4) & 3) - 1
    local cw = ((i >> 6) & 3) - 1
    OpenSimplex2S.latticePoints[1 + i] = LatticePoint4D.new(cx, cy, cz, cw)
end

-- LOOKUP_4D is a 2D table; populate each row with pregen. [JB]
for i = 1, 256, 1 do
    local trgRow = {}
    local refRow = OpenSimplex2S.lookup4DPregen[i]
    local len = #refRow
    for j = 1, len, 1 do
        trgRow[j] = OpenSimplex2S.latticePoints[1 + refRow[j]]
    end
    OpenSimplex2S.LOOKUP_4D[i] = trgRow
end

-- Divide grad2 by N2, Populate GRADIENTS_2D with grad2. [JB]
local grad2len = #OpenSimplex2S.grad2
for i = 1, grad2len, 1 do
    local grd = OpenSimplex2S.grad2[i]
    grd.dx = grd.dx / OpenSimplex2S.N2
    grd.dy = grd.dy / OpenSimplex2S.N2
end

for i = 0, OpenSimplex2S.PSIZE - 1, 1 do
    OpenSimplex2S.GRADIENTS_2D[1 + i] =
        OpenSimplex2S.grad2[1 + (i % grad2len)]
end

-- Divide grad3 by N3, Populate GRADIENTS_3D with grad3. [JB]
local grad3len = #OpenSimplex2S.grad3
for i = 1, grad3len, 1 do
    local grd = OpenSimplex2S.grad3[i]
    grd.dx = grd.dx / OpenSimplex2S.N3
    grd.dy = grd.dy / OpenSimplex2S.N3
    grd.dz = grd.dz / OpenSimplex2S.N3
end

for i = 0, OpenSimplex2S.PSIZE - 1, 1 do
    OpenSimplex2S.GRADIENTS_3D[1 + i] =
        OpenSimplex2S.grad3[1 + (i % grad3len)]
end

-- Divide grad4 by N4, Populate GRADIENTS_4D with grad4. [JB]
local grad4len = #OpenSimplex2S.grad4
for i = 1, grad4len, 1 do
    local grd = OpenSimplex2S.grad4[i]
    grd.dx = grd.dx / OpenSimplex2S.N4
    grd.dy = grd.dy / OpenSimplex2S.N4
    grd.dz = grd.dz / OpenSimplex2S.N4
    grd.dw = grd.dw / OpenSimplex2S.N4
end

for i = 0, OpenSimplex2S.PSIZE - 1, 1 do
    OpenSimplex2S.GRADIENTS_4D[1 + i] =
        OpenSimplex2S.grad4[1 + (i % grad4len)]
end

function OpenSimplex2S.new(seed)
    local inst = setmetatable({}, OpenSimplex2S)

    inst.perm = {}
    inst.permGrad2 = {}
    inst.permGrad3 = {}
    inst.permGrad4 = {}

    local source = {}
    for i = 0, OpenSimplex2S.PSIZE - 1, 1 do
        source[1 + i] = i
    end

    local s = seed or os.time()
    for i = OpenSimplex2S.PSIZE - 1, 0, -1 do
        s = s * 6364136223846793005 + 1442695040888963407

        -- Lua % is mod, not fmod.
        -- Seems to work ok without demotion from 64 long to 32 int. [JB]
        local r = (s + 31) % (i + 1)
        if r < 0 then r = r + (i + 1) end
        inst.perm[1 + i] = source[1 + r]
        local n = 1 + inst.perm[1 + i]
        inst.permGrad2[1 + i] = OpenSimplex2S.GRADIENTS_2D[n]
        inst.permGrad3[1 + i] = OpenSimplex2S.GRADIENTS_3D[n]
        inst.permGrad4[1 + i] = OpenSimplex2S.GRADIENTS_4D[n]
        source[1 + r] = source[1 + i]

    end

    return inst
end

---2D SuperSimplex noise, standard lattice orientation.
function OpenSimplex2S:noise2(x, y)
    --Get points for A2* lattice
    local s = 0.366025403784439 * (x + y)
    local xs = x + s
    local ys = y + s
    return self:noise2_Base(xs, ys)
end

---2D SuperSimplex noise, with Y pointing down the main diagonal. Might be
---better for a 2D sandbox style game, where Y is vertical. Probably slightly
---less optimal for heightmaps or continent maps.
function OpenSimplex2S:noise2_XBeforeY(x, y)
    --Skew transform and rotation baked into one.
    local xx = x * 0.7071067811865476
    local yy = y * 1.224744871380249
    return self:noise2_Base(yy + xx, yy - xx)
end

---2D SuperSimplex noise base. Lookup table implementation inspired by
---DigitalShadow.
function OpenSimplex2S:noise2_Base(xs, ys)
    local value = 0
    local xsb = math.floor(xs)
    local ysb = math.floor(ys)
    local xsi = xs - xsb
    local ysi = ys - ysb
    local a = math.tointeger(xsi + ysi)
    local index =
        (a << 2) |
        math.tointeger(xsi - ysi / 2 + 1 - a / 2.0) << 3 |
        math.tointeger(ysi - xsi / 2 + 1 - a / 2.0) << 4

    local ssi = (xsi + ysi) * -0.211324865405187
    local xi = xsi + ssi
    local yi = ysi + ssi

    for i = 0, 3, 1 do
        local c = OpenSimplex2S.LOOKUP_2D[1 + index + i]

        local dx = xi + c.dx
        local dy = yi + c.dy;
        local attn = 2.0 / 3.0 - dx * dx - dy * dy;
        if attn > 0 then
            local pxm = (xsb + c.xsv) & OpenSimplex2S.PMASK
            local pym = (ysb + c.ysv) & OpenSimplex2S.PMASK
            local grad = self.permGrad2[
                1 + (self.perm[1 + pxm] ~ pym)]
            local extrapolation = grad.dx * dx + grad.dy * dy;

            attn = attn * attn
            value = value + (attn * attn * extrapolation)
        end
    end

    return value
end

---3D Re-oriented 8-point BCC noise, classic orientation Proper substitute for
---what 3D SuperSimplex would be, in light of Forbidden Formulae. Use
---noise3_XYBeforeZ or noise3_XZBeforeY instead, wherever appropriate.
function OpenSimplex2S:noise3_Classic(x, y, z)

    --Re-orient the cubic lattices via rotation, to produce the expected look on
    --cardinal planar slices.
    --If texturing objects that don't tend to have cardinal plane faces, you could
    --even remove this.
    --Orthonormal rotation. Not a skew transform.
    local r = (2.0 / 3.0) * (x + y + z)
    local xr = r - x
    local yr = r - y
    local zr = r - z

    --Evaluate both lattices to form a BCC lattice.
    return self:noise3_BCC(xr, yr, zr)
end

---3D Re-oriented 8-point BCC noise, with better visual isotropy in (X, Y).
---Recommended for 3D terrain and time-varied animations. The Z coordinate
---should always be the "different" coordinate in your use case. If Y is
---vertical in world coordinates, call noise3_XYBeforeZ(x, z, Y) or use
---noise3_XZBeforeY. If Z is vertical in world coordinates, call
---noise3_XYBeforeZ(x, y, Z). For a time varied animation, call
---noise3_XYBeforeZ(x, y, T).
function OpenSimplex2S:noise3_XYBeforeZ(x, y, z)
    --Re-orient the cubic lattices without skewing, to make X and Y triangular like
    --2D.
    --Orthonormal rotation. Not a skew transform.
    local xy = x + y
    local s2 = xy * -0.211324865405187
    local zz = z * 0.577350269189626
    local xr = x + s2 - zz
    local yr = y + s2 - zz
    local zr = xy * 0.577350269189626 + zz

    --Evaluate both lattices to form a BCC lattice.
    return self:noise3_BCC(xr, yr, zr)
end

---3D Re-oriented 8-point BCC noise, with better visual isotropy in (X, Z).
---Recommended for 3D terrain and time-varied animations. The Y coordinate
---should always be the "different" coordinate in your use case. If Y is
---vertical in world coordinates, call noise3_XZBeforeY(x, Y, z). If Z is
---vertical in world coordinates, call noise3_XZBeforeY(x, Z, y) or use
---noise3_XYBeforeZ. For a time varied animation, call noise3_XZBeforeY(x, T, y)
---or use noise3_XYBeforeZ.
function OpenSimplex2S:noise3_XZBeforeY(x, y, z)
    --Re-orient the cubic lattices without skewing, to make X and Z triangular like
    --2D.
    --Orthonormal rotation. Not a skew transform.
    local xz = x + z
    local s2 = xz * -0.211324865405187
    local yy = y * 0.577350269189626
    local xr = x + s2 - yy
    local zr = z + s2 - yy
    local yr = xz * 0.577350269189626 + yy

    --Evaluate both lattices to form a BCC lattice.
    return self:noise3_BCC(xr, yr, zr)
end

---Generate overlapping cubic lattices for 3D Re-oriented BCC noise. Lookup
---table implementation inspired by DigitalShadow. It was actually faster to
---narrow down the points in the loop itself, than to build up the index with
---enough info to isolate 8 points.
function OpenSimplex2S:noise3_BCC(xr, yr, zr)
    --Get base and offsets inside cube of first lattice.
    local xrb = math.floor(xr)
    local yrb = math.floor(yr)
    local zrb = math.floor(zr)

    local xri = xr - xrb
    local yri = yr - yrb
    local zri = zr - zrb

    --Identify which octant of the cube we're in. This determines which cell
    --in the other cubic lattice we're in, and also narrows down one point on each.
    local xht = math.tointeger(xri + 0.5)
    local yht = math.tointeger(yri + 0.5)
    local zht = math.tointeger(zri + 0.5)
    local index = (xht << 0) | (yht << 1) | (zht << 2)

    --Point contributions.
    local value = 0
    local c = OpenSimplex2S.LOOKUP_3D[1 + index]
    while c ~= nil do
        local dxr = xri + c.dxr
        local dyr = yri + c.dyr
        local dzr = zri + c.dzr
        local attn = 0.75 - dxr * dxr - dyr * dyr - dzr * dzr
        if attn < 0 then
            c = c.nextOnFailure
        else
            local pxm = (xrb + c.xrv) & OpenSimplex2S.PMASK
            local pym = (yrb + c.yrv) & OpenSimplex2S.PMASK
            local pzm = (zrb + c.zrv) & OpenSimplex2S.PMASK

            local clpxm = 1 + pxm
            local clprm0 = 1 + (self.perm[clpxm] ~ pym)
            local clprm1 = 1 + (self.perm[clprm0] ~ pzm)
            local grad = self.permGrad3[clprm1]
			local extrapolation = grad.dx * dxr
                                + grad.dy * dyr
                                + grad.dz * dzr
            attn = attn * attn
            value = value + (attn * attn * extrapolation)
            c = c.nextOnSuccess
        end
    end

    return value
end

---4D SuperSimplex noise, classic lattice orientation.
function OpenSimplex2S:noise4_Classic(x, y, z, w)
    --Get points for A4 lattice
    local s = 0.309016994374947 * (x + y + z + w)
    local xs = x + s
    local ys = y + s
    local zs = z + s
    local ws = w + s

    return self:noise4_Base(xs, ys, zs, ws)
end

---4D SuperSimplex noise, with XY and ZW forming orthogonal triangular-based
---planes. Recommended for 3D terrain, where X and Y (or Z and W) are
---horizontal. Recommended for noise(x, y, sin(time), cos(time)) trick.
function OpenSimplex2S:noise4_XYBeforeZW(x, y, z, w)
    local s2 = (x + y) * -0.28522513987434876941 + (z + w) * 0.83897065470611435718
    local t2 = (z + w) * 0.21939749883706435719 + (x + y) * -0.48214856493302476942

    local xs = x + s2
    local ys = y + s2
    local zs = z + t2
    local ws = w + t2

    return self:noise4_Base(xs, ys, zs, ws);
end

---4D SuperSimplex noise, with XZ and YW forming orthogonal triangular-based
---planes. Recommended for 3D terrain, where X and Z (or Y and W) are
---horizontal.
function OpenSimplex2S:noise4_XZBeforeYW(x, y, z, w)
    local s2 = (x + z) * -0.28522513987434876941 + (y + w) * 0.83897065470611435718
    local t2 = (y + w) * 0.21939749883706435719 + (x + z) * -0.48214856493302476942

    local xs = x + s2
    local ys = y + t2
    local zs = z + s2
    local ws = w + t2

    return self:noise4_Base(xs, ys, zs, ws);
end

---4D SuperSimplex noise, with XYZ oriented like noise3_Classic, and W for an
---extra degree of freedom. Recommended for time-varied animations which texture
---a 3D object (W=time)
function OpenSimplex2S:noise4_XYZBeforeW(x, y, z, w)
    local xyz = x + y + z
    local ww = w * 1.118033988749894
    local s2 = xyz * -0.16666666666666666 + ww

    local xs = x + s2
    local ys = y + s2
    local zs = z + s2
    local ws = -0.5 * xyz + ww

    return self:noise4_Base(xs, ys, zs, ws)
end

---4D SuperSimplex noise base. Using ultra-simple 4x4x4x4 lookup partitioning.
---This isn't as elegant or SIMD/GPU/etc. portable as other approaches, but it
---does compete performance-wise with optimized OpenSimplex1.
function OpenSimplex2S:noise4_Base(xs, ys, zs, ws)
    local value = 0.0

    --Get base points and offsets
    local xsb = math.floor(xs)
    local ysb = math.floor(ys)
    local zsb = math.floor(zs)
    local wsb = math.floor(ws)

    local xsi = xs - xsb
    local ysi = ys - ysb
    local zsi = zs - zsb
    local wsi = ws - wsb

    --Unskewed offsets
    local ssi = (xsi + ysi + zsi + wsi) * -0.138196601125011
    local xi = xsi + ssi
    local yi = ysi + ssi
    local zi = zsi + ssi
    local wi = wsi + ssi

    local index = ((math.floor(xs * 4) & 3) << 0)
                | ((math.floor(ys * 4) & 3) << 2)
                | ((math.floor(zs * 4) & 3) << 4)
                | ((math.floor(ws * 4) & 3) << 6)

    --Point contributions
    local lut = OpenSimplex2S.LOOKUP_4D[1 + index]
    for i = 1, #lut, 1 do
        local c = lut[i]
        local dx = xi + c.dx
        local dy = yi + c.dy
        local dz = zi + c.dz
        local dw = wi + c.dw

		local attn = 0.8 - dx * dx - dy * dy - dz * dz - dw * dw
        if attn > 0 then
            attn = attn * attn

            local pxm = (xsb + c.xsv) & OpenSimplex2S.PMASK
            local pym = (ysb + c.ysv) & OpenSimplex2S.PMASK
            local pzm = (zsb + c.zsv) & OpenSimplex2S.PMASK
            local pwm = (wsb + c.wsv) & OpenSimplex2S.PMASK

            local clpxm = 1 + pxm
            local clprm0 = 1 + (self.perm[clpxm] ~ pym)
            local clprm1 = 1 + (self.perm[clprm0] ~ pzm)
            local clprm2 = 1 + (self.perm[clprm1] ~ pwm)
            local grad = self.permGrad4[clprm2]
            local extrapolation = grad.dx * dx
                                + grad.dy * dy
                                + grad.dz * dz
                                + grad.dw * dw
            value = value + (attn * attn * extrapolation)
        end
    end

    return value
end